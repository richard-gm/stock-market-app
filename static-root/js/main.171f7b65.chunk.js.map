{"version":3,"sources":["logo.svg","lookup/components.js","tweets-modules/buttons.js","tweets-modules/lookup.js","tweets-modules/detail.js","tweets-modules/list.js","tweets-modules/create.js","tweets-modules/components.js","App.js","serviceWorker.js","index.js"],"names":["backendLookup","method","endpoint","callback","data","jsonData","JSON","stringify","xhr","XMLHttpRequest","url","responseType","csrftoken","name","cookieValue","document","cookie","cookies","split","i","length","trim","substring","decodeURIComponent","getCookie","open","setRequestHeader","onload","status","response","detail","window","location","href","onerror","e","console","log","send","ActionBtn","props","tweet","action","didPerformAction","likes","className","actionDisplay","display","handleActionBackendEvent","type","onClick","event","preventDefault","tweetId","id","apiTweetAction","ParentTweet","parent","Tweet","hideActions","didRetweet","useState","actionTweet","setActionTweet","match","pathname","urlTweetId","groups","tweetid","isDetail","handlePerformAction","newActionTweet","content","Fragment","TweetsList","tweetsInit","setTweetsInit","tweets","setTweets","tweetsDidSet","setTweetsDidSet","useEffect","final","newTweets","concat","username","apiTweetList","alert","handleDidRetweet","newTweet","updateTweetsInit","unshift","updateFinalTweets","map","item","index","TweetCreate","textAreaRef","React","createRef","didTweet","handleBackendUpdate","onSubmit","newVal","current","value","ref","required","TweetsComponent","setNewTweets","canTweet","tempNewTweets","TweetDetailComponent","didLookup","setDidLookup","setTweet","handleBackendLookup","apiTweetDetail","App","src","logo","alt","target","rel","Boolean","hostname","appEl","getElementById","ReactDOM","render","createElement","tweetsEl","dataset","querySelectorAll","forEach","container","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.171f7b65.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","\nfunction getCookie(name) {\n    var cookieValue = null;\n    if (document.cookie && document.cookie !== '') {\n        var cookies = document.cookie.split(';');\n        for (var i = 0; i < cookies.length; i++) {\n            var cookie = cookies[i].trim();\n            // Does this cookie string begin with the name we want?\n            if (cookie.substring(0, name.length + 1) === (name + '=')) {\n                cookieValue = decodeURIComponent(cookie.substring(name.length + 1));\n                break;\n            }\n        }\n    }\n    return cookieValue;\n}\n\nexport function backendLookup(method, endpoint, callback, data) {\n    let jsonData;\n    if (data){\n        jsonData = JSON.stringify(data)\n    }\n    const xhr = new XMLHttpRequest() // requesting data as HTTP\n    const url = `http://localhost:8000/profile/api${endpoint}`   // Goes to this url\n    xhr.responseType = \"json\"\n    const csrftoken = getCookie('csrftoken');\n    xhr.open(method, url)\n    xhr.setRequestHeader(\"Content-Type\", \"application/json\")\n    // user's token\n    if (csrftoken){\n        // xhr.setRequestHeader(\"HTTP_X_REQUESTED_WITH\", \"XMLHttpRequest\")\n        xhr.setRequestHeader(\"X-Requested-With\", \"XMLHttpRequest\")\n        xhr.setRequestHeader(\"X-CSRFToken\", csrftoken)\n    }\n\n    xhr.onload = function() {\n        if (xhr.status === 403){\n            const details = xhr.response.detail\n            if (details === 'Authentication credentials were not provided.'){\n              window.location.href = \"/login?showLoginRequired=true\"\n            }\n        }\n        callback(xhr.response, xhr.status)\n    }\n    xhr.onerror = function (e) {\n        callback({\"message\": \"The request was an error\"}, 400)\n    }\n    console.log(jsonData)\n    xhr.send(jsonData)\n}\n","import {apiTweetAction} from \"./lookup\";\nimport React from \"react\"\n\nexport function ActionBtn(props) {\n    const {tweet, action, didPerformAction} = props\n    const likes = tweet.likes ? tweet.likes : 0\n    const className = props.className ? props.className : 'btn btn-primary btn-sm'\n    const actionDisplay = action.display ? action.display : 'Action'\n    const handleActionBackendEvent = (response, status) =>{\n        console.log(response, status)\n        if ((status === 200 || status === 201) && didPerformAction){\n            didPerformAction(response, status)\n        }\n    }\n    const handleClick = (event) => {\n        event.preventDefault()\n        apiTweetAction(tweet.id, action.type, handleActionBackendEvent)\n    }\n    const display = action.type === 'like' ? `${likes} ${actionDisplay}` : actionDisplay\n    return <button className={className} onClick={handleClick}>{display}</button>\n}","import {backendLookup} from '../lookup'\n\n//6h:40min\nexport function apiTweetCreate(newTweet, callback){ // Lookup method for POSTING new tweets\n    backendLookup(\"POST\", \"/tweets/create/\", callback, {content: newTweet})\n}\n//7h10min\nexport function apiTweetAction(tweetId, action, callback){ // Lookup method for POSTING new tweets\n    const data = {id: tweetId, action: action}\n    backendLookup(\"POST\", \"/tweets/action/\", callback, data)\n}\n\n//7h:40min\nexport function apiTweetDetail(tweetId, callback) {\n    backendLookup(\"GET\", `/tweets/${tweetId}/`, callback)\n}\n\n//5h20min React tutorial\nexport function apiTweetList(username, callback) {\n    let endpoint =  \"/tweets/\"\n    if (username){\n        endpoint =  `/tweets/?username=${username}`\n    }\n    backendLookup(\"GET\", endpoint, callback)\n}","import React, {useState} from \"react\";\nimport {ActionBtn} from \"./buttons\";\n\nexport function ParentTweet(props){\n    const {tweet} = props\n    return tweet.parent ? <div className='row'>\n        <div className='col-11 mx-auto p-3 border rounded'>\n            <p className='mb-0 text-muted small'>Retweet</p>\n            <Tweet hideActions className={' '} tweet={tweet.parent} />\n        </div>\n    </div> : null\n}\n\nexport function Tweet(props) { // Returns list of tweets\n    const {tweet, didRetweet, hideActions} = props\n    const [actionTweet, setActionTweet] = useState(props.tweet ? props.tweet : null)\n    const className = props.className ? props.className : 'col-10 mx-auto col-md-6'\n    const path = window.location.pathname\n    const match = path.match(/(?<tweetid>\\d+)/)\n    const urlTweetId = match ? match.groups.tweetid : -1\n    const isDetail = `${tweet.id}` === `${urlTweetId}`\n\n    const handleLink = (event) => {\n        event.preventDefault()\n        window.location.href = `/${tweet.id}`\n    }\n    const handlePerformAction = (newActionTweet, status) => {\n        if (status === 200){\n            setActionTweet(newActionTweet)\n        } else if (status === 201) {\n            if (didRetweet){\n                didRetweet(newActionTweet)\n            }\n        }\n\n    }\n    return <div className={className}>\n        <div>\n            <p>{tweet.id} - {tweet.content}</p>\n            <ParentTweet tweet={tweet} />\n        </div>\n        <div className='btn btn-group'>\n            {(actionTweet && hideActions !== true) && <React.Fragment>\n                <ActionBtn tweet={actionTweet} didPerformAction={handlePerformAction} action={{type: \"like\", display:\"Likes\"}}/>\n                <ActionBtn tweet={actionTweet} didPerformAction={handlePerformAction} action={{type: \"unlike\", display:\"Unlike\"}}/>\n                <ActionBtn tweet={actionTweet} didPerformAction={handlePerformAction} action={{type: \"retweet\", display:\"Retweet\"}}/>\n            </React.Fragment>\n            }\n            {isDetail === true ? null : <button className='btn btn-outline-primary btn-sm' onClick={handleLink}>View</button>}\n        </div>\n\n    </div>\n}","import React, {useEffect, useState} from \"react\"\nimport {apiTweetList} from \"./lookup\";\nimport {Tweet} from \"./detail\";\n\n//6h13\nexport function TweetsList(props) {\n    const [tweetsInit, setTweetsInit] = useState([]) // Monitor changes\n    const [tweets, setTweets] = useState([])\n    const [tweetsDidSet, setTweetsDidSet] = useState(false)\n    useEffect(()=>{\n        const final = [...props.newTweets].concat(tweetsInit)\n        if (final.length !== tweets.length) {\n            setTweets(final)\n        }\n    }, [props.newTweets, tweets, tweetsInit])\n\n    useEffect(() => {\n        if (tweetsDidSet === false){\n            const handleTweetListLookup = (response, status) => {\n                if (status === 200){\n                    setTweetsInit(response)\n                    setTweetsDidSet(true)\n                } else {\n                    alert(\"There was an error\")\n                }\n            }\n            apiTweetList(props.username, handleTweetListLookup) // Null value is needed by default. will be replaced by username\n        }\n    }, [tweetsInit, tweetsDidSet, setTweetsDidSet, props.username])\n    const handleDidRetweet = (newTweet) => {\n        const updateTweetsInit = [...tweetsInit]\n        updateTweetsInit.unshift(newTweet)\n        setTweetsInit(updateTweetsInit)\n        const updateFinalTweets = [...tweets]\n        updateFinalTweets.unshift(tweets)\n        setTweets(updateFinalTweets)\n    }\n    // Returning tweets items - REMOVE the key in the future so it doest not show the ID TODO\n    return tweets.map((item, index)=>{\n        return <Tweet\n            tweet={item}\n            didRetweet={handleDidRetweet}\n            className='my-5 py-5 border bg-white text-dark'\n            key={`${index}-{item.id}`} />\n    })\n}","\nimport React from 'react'\nimport {apiTweetCreate} from './lookup'\n\n\nexport function TweetCreate(props){\n    const textAreaRef = React.createRef()\n    const {didTweet} = props\n    const handleBackendUpdate = (response, status) =>{\n        if (status === 201){\n            didTweet(response)\n        } else {\n            console.log(response)\n            alert(\"An error occurred, please try again\")\n        }\n    }\n    const handleSubmit = (event) => {\n        event.preventDefault()\n        const newVal = textAreaRef.current.value\n        // backend api request\n        apiTweetCreate(newVal, handleBackendUpdate)\n        textAreaRef.current.value = ''\n    }\n    return <div className={props.className}>\n        <form onSubmit={handleSubmit}>\n            <textarea ref={textAreaRef} required={true} className='form-control' name='tweet'>\n\n            </textarea>\n            <button type='submit' className='btn btn-primary my-3'>Tweet</button>\n        </form>\n    </div>\n}","import React, {useEffect, useState}  from 'react'\n\nimport {TweetCreate} from './create'\nimport {Tweet} from \"./detail\"\nimport {apiTweetDetail} from \"./lookup\"\nimport {TweetsList} from './list'\n\nexport function TweetsComponent(props) {\n        const [newTweets, setNewTweets] = useState([])\n        const canTweet = props.canTweet === \"false\" ? false : true\n        const handleNewTweet = (newTweet) =>{\n            let tempNewTweets = [...newTweets]\n            tempNewTweets.unshift(newTweet)\n            setNewTweets(tempNewTweets)\n        }\n    return <div className={props.className}>\n        {canTweet === true && <TweetCreate didTweet={handleNewTweet} className='col-12 mb-3' />}\n        <TweetsList newTweets={newTweets} {...props} />\n    </div>\n}\n\nexport function TweetDetailComponent(props){\n    const {tweetId} = props\n    const [didLookup, setDidLookup] = useState(false) // setting up the state of the tweet\n    const [tweet, setTweet] = useState(null)\n    const handleBackendLookup = (response, status)=> {\n         if (status === 200){\n             setTweet(response)\n         } else {\n             alert(\"There was an error! No tweet found\")\n             console.log(response)\n         }\n    }\n    useEffect(()=>{\n        if (didLookup === false){\n            apiTweetDetail(tweetId, handleBackendLookup)\n            setDidLookup(true)\n        }\n    }, [tweetId, didLookup, setDidLookup]) // arguments that the use effect function will use\n\n    return tweet === null ? null : <Tweet tweet={tweet} className={props.className} />\n}\n","import React from \"react\"; // run HTTP request from the backend\nimport logo from './logo.svg';\nimport './App.css';\nimport {TweetsComponent} from \"./tweets-modules\";\n\n\nfunction App() {\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <div>\n          <TweetsComponent/>\n        </div>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                        'worker. To learn more, visit https://bit.ly/CRA-PWA'\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch(error => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n        headers: { 'Service-Worker': 'script' }\n    })\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type');\n            if (\n                response.status === 404 ||\n                (contentType != null && contentType.indexOf('javascript') === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log(\n                'No internet connection found. App is running in offline mode.'\n            );\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready.then(registration => {\n            registration.unregister();\n        });\n    }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport {TweetsComponent, TweetDetailComponent} from './tweets-modules'\nimport * as serviceWorker from './serviceWorker';\n\nconst appEl = document.getElementById('root')\nif (appEl) {\n    ReactDOM.render(<App />, appEl);\n}\nconst e = React.createElement\nconst tweetsEl = document.getElementById(\"tweetme-2\")\nif (tweetsEl) {\n    console.log(tweetsEl.dataset)\n    ReactDOM.render(\n        e(TweetsComponent, tweetsEl.dataset), tweetsEl);\n}\n\nconst tweetDetailElements = document.querySelectorAll(\".tweetme-2-detail\")\ntweetDetailElements.forEach(container=> { // Rendering the details elements\n    ReactDOM.render(\n        e(TweetDetailComponent, container.dataset), //gets the dataset\n        container); //inserting the data into the container element\n})\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nserviceWorker.unregister();\n"],"sourceRoot":""}