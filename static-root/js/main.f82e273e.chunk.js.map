{"version":3,"sources":["logo.svg","lookup/components.js","tweets/lookup.js","tweets/buttons.js","tweets/create.js","profiles/components.js","tweets/detail.js","tweets/feed.js","tweets/list.js","tweets/components.js","App.js","serviceWorker.js","index.js"],"names":["backendLookup","method","endpoint","callback","data","jsonData","JSON","stringify","xhr","XMLHttpRequest","url","responseType","csrftoken","name","cookieValue","document","cookie","cookies","split","i","length","trim","substring","decodeURIComponent","getCookie","open","setRequestHeader","onload","status","response","detail","window","location","href","indexOf","onerror","e","send","apiTweetFeed","nextUrl","undefined","replace","apiTweetList","username","ActionBtn","props","tweet","action","didPerformAction","likes","className","actionDisplay","display","handleActionBackendEvent","console","log","type","onClick","event","preventDefault","tweetId","id","apiTweetAction","TweetCreate","textAreaRef","React","createRef","didTweet","handleBackendUpdate","alert","onSubmit","newVal","current","value","content","ref","required","UserLink","children","UserDisplay","user","nameDisplay","includeFullName","first_name","last_name","Fragment","UserPicture","ParentTweet","parent","Tweet","isRetweet","retweeter","hideActions","didRetweet","useState","actionTweet","setActionTweet","match","pathname","urlTweetId","groups","tweetid","isDetail","handlePerformAction","newActionTweet","FeedList","tweetsInit","setTweetsInit","tweets","setTweets","setNextUrl","tweetsDidSet","setTweetsDidSet","useEffect","final","newTweets","concat","next","results","handleDidRetweet","newTweet","updateTweetsInit","unshift","updateFinalTweets","map","item","index","TweetsList","TweetsComponent","setNewTweets","canTweet","tempNewTweets","TweetDetailComponent","didLookup","setDidLookup","setTweet","handleBackendLookup","apiTweetDetail","App","src","logo","alt","target","rel","Boolean","hostname","appEl","getElementById","ReactDOM","render","createElement","tweetsEl","dataset","tweetFeedEl","querySelectorAll","forEach","container","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f82e273e.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","\nfunction getCookie(name) {\n    var cookieValue = null;\n    if (document.cookie && document.cookie !== '') {\n        var cookies = document.cookie.split(';');\n        for (var i = 0; i < cookies.length; i++) {\n            var cookie = cookies[i].trim();\n            // Does this cookie string begin with the name we want?\n            if (cookie.substring(0, name.length + 1) === (name + '=')) {\n                cookieValue = decodeURIComponent(cookie.substring(name.length + 1));\n                break;\n            }\n        }\n    }\n    return cookieValue;\n}\n\nexport function backendLookup(method, endpoint, callback, data) {\n    let jsonData;\n    if (data){\n        jsonData = JSON.stringify(data)\n    }\n    const xhr = new XMLHttpRequest()\n    const url = `http://localhost:8000/api${endpoint}`\n    xhr.responseType = \"json\"\n    const csrftoken = getCookie('csrftoken');\n    xhr.open(method, url)\n    xhr.setRequestHeader(\"Content-Type\", \"application/json\")\n\n    if (csrftoken){\n        // xhr.setRequestHeader(\"HTTP_X_REQUESTED_WITH\", \"XMLHttpRequest\")\n        xhr.setRequestHeader(\"X-Requested-With\", \"XMLHttpRequest\")\n        xhr.setRequestHeader(\"X-CSRFToken\", csrftoken)\n    }\n\n    xhr.onload = function() {\n        if (xhr.status === 403) {\n            const detail = xhr.response.detail\n            if (detail === \"Authentication credentials were not provided.\"){\n                if (window.location.href.indexOf(\"login\") === -1) {\n                    window.location.href = \"/login?showLoginRequired=true\"\n                }\n            }\n        }\n        callback(xhr.response, xhr.status)\n    }\n    xhr.onerror = function (e) {\n        callback({\"message\": \"The request was an error\"}, 400)\n    }\n    xhr.send(jsonData)\n}\n","import {backendLookup} from '../lookup'\n\n//6h:40min\nexport function apiTweetCreate(newTweet, callback){ // Lookup method for POSTING new tweets\n    backendLookup(\"POST\", \"/tweets/create/\", callback, {content: newTweet})\n}\n//7h10min\nexport function apiTweetAction(tweetId, action, callback){\n    const data = {id: tweetId, action: action}\n    backendLookup(\"POST\", \"/tweets/action/\", callback, data)\n}\n\n//7h:40min\nexport function apiTweetDetail(tweetId, callback) {\n    backendLookup(\"GET\", `/tweets/${tweetId}/`, callback)\n}\n\n//11h:25min\nexport function apiTweetFeed(callback, nextUrl) {\n    let endpoint =  \"/tweets/feed/\"\n    if (nextUrl !== null && nextUrl !== undefined) {\n        endpoint = nextUrl.replace(\"http://localhost:8000/api\", \"\")\n    }\n    backendLookup(\"GET\", endpoint, callback)\n}\n\n//5h20min React tutorial\nexport function apiTweetList(username, callback, nextUrl) {\n    let endpoint =  \"/tweets/\"\n    if (username){\n        endpoint =  `/tweets/?username=${username}`\n    }\n    if (nextUrl !== null && nextUrl !== undefined) {\n        endpoint = nextUrl.replace(\"http://localhost:8000/api\", \"\")\n    }\n    backendLookup(\"GET\", endpoint, callback)\n}","import {apiTweetAction} from \"./lookup\";\nimport React from \"react\"\n\nexport function ActionBtn(props) {\n    const {tweet, action, didPerformAction} = props\n    const likes = tweet.likes ? tweet.likes : 0\n    const className = props.className ? props.className : 'btn btn-primary btn-sm'\n    const actionDisplay = action.display ? action.display : 'Action'\n\n    const handleActionBackendEvent = (response, status) =>{\n        console.log(response, status)\n        if ((status === 200 || status === 201) && didPerformAction){\n            didPerformAction(response, status)\n        }\n    }\n    const handleClick = (event) => {\n        event.preventDefault()\n        apiTweetAction(tweet.id, action.type, handleActionBackendEvent)\n\n    }\n    const display = action.type === 'like' ? `${likes} ${actionDisplay}` : actionDisplay\n    return <button className={className} onClick={handleClick}>{display}</button>\n}","import React from 'react'\nimport {apiTweetCreate} from './lookup'\n\n\nexport function TweetCreate(props){\n    const textAreaRef = React.createRef()\n    const {didTweet} = props\n    const handleBackendUpdate = (response, status) =>{\n        if (status === 201){\n            didTweet(response)\n        } else {\n            console.log(response)\n            alert(\"An error occurred please try again\")\n        }\n    }\n\n    const handleSubmit = (event) => {\n        event.preventDefault()\n        const newVal = textAreaRef.current.value\n        // backend api request\n        apiTweetCreate(newVal, handleBackendUpdate)\n        textAreaRef.current.value = ''\n    }\n    return <div className={props.className}>\n        <form onSubmit={handleSubmit}>\n            <textarea ref={textAreaRef} required={true} className='form-control' name='tweet'>\n\n            </textarea>\n            <button type='submit' className='btn btn-primary my-3'>Tweet</button>\n        </form>\n    </div>\n}","import React from 'react'\n\nexport function UserLink (props) {\n    const {username} = props\n    const handleUserLink = (event) => {\n        window.location.href= `/profiles/${username}`\n    }\n    return <span className='pointer' onClick={handleUserLink}>\n      {props.children}\n  </span>\n}\n\nexport  function UserDisplay(props){\n    const {user, includeFullName} = props\n    const nameDisplay = includeFullName === true ? `${user.first_name} ${user.last_name} ` : null\n    return <React.Fragment>\n        {nameDisplay}\n        <UserLink username={user.username}>@{user.username}</UserLink>\n    </React.Fragment>\n}\n\nexport  function UserPicture (props) {\n    const {user} = props\n    return  <UserLink username={user.username}><span className='mx-1 px-3 py-2 rounded-circle bg-dark text-white'>\n         {user.username[0]}\n  </span></UserLink>\n}","import React, {useState}  from 'react'\n\nimport {ActionBtn} from './buttons'\n\nimport {\n    UserDisplay,\n    UserPicture\n} from '../profiles'\n\nexport function ParentTweet(props){\n    const {tweet} = props\n    return tweet.parent ? <Tweet isRetweet retweeter={props.retweeter} hideActions className={' '} tweet={tweet.parent} /> : null\n}\nexport function Tweet(props) {\n    const {tweet, didRetweet, hideActions, isRetweet, retweeter} = props\n    const [actionTweet, setActionTweet] = useState(props.tweet ? props.tweet : null)\n    let className = props.className ? props.className : 'col-10 mx-auto col-md-6'\n    className = isRetweet === true ? `${className} p-2 border rounded` : className\n    const path = window.location.pathname\n    const match = path.match(/(?<tweetid>\\d+)/)\n    const urlTweetId = match ? match.groups.tweetid : -1\n    const isDetail = `${tweet.id}` === `${urlTweetId}`\n\n    const handleLink = (event) => {\n        event.preventDefault()\n        window.location.href = `/${tweet.id}`\n    }\n    const handlePerformAction = (newActionTweet, status) => {\n        if (status === 200){\n            setActionTweet(newActionTweet)\n        } else if (status === 201) {\n            if (didRetweet){\n                didRetweet(newActionTweet)\n            }\n        }\n\n    }\n\n    return <div className={className}>\n        {isRetweet === true && <div className='mb-2'>\n            <span className='small text-muted'>Retweet via <UserDisplay user={retweeter} /></span>\n        </div>}\n        <div className='d-flex'>\n\n            <div className=''>\n                <UserPicture user={tweet.user} />\n            </div>\n            <div className='col-11'>\n                <div>\n\n                    <p>\n                        <UserDisplay includeFullName user={tweet.user} />\n                    </p>\n                    <p>{tweet.content}</p>\n\n                    <ParentTweet tweet={tweet} retweeter={tweet.user} />\n                </div>\n                <div className='btn btn-group px-0'>\n                    {(actionTweet && hideActions !== true) && <React.Fragment>\n                        <ActionBtn tweet={actionTweet} didPerformAction={handlePerformAction} action={{type: \"like\", display:\"Likes\"}}/>\n                        <ActionBtn tweet={actionTweet} didPerformAction={handlePerformAction} action={{type: \"unlike\", display:\"Unlike\"}}/>\n                        <ActionBtn tweet={actionTweet} didPerformAction={handlePerformAction} action={{type: \"retweet\", display:\"Retweet\"}}/>\n                    </React.Fragment>\n                    }\n                    {isDetail === true ? null : <button className='btn btn-outline-primary btn-sm' onClick={handleLink}>View</button>}\n                </div>\n            </div>\n        </div>\n    </div>\n}","import React, {useEffect, useState}  from 'react'\n\nimport {apiTweetFeed} from './lookup'\n\nimport {Tweet} from './detail'\n\nexport function FeedList(props) {\n    const [tweetsInit, setTweetsInit] = useState([])\n    const [tweets, setTweets] = useState([])\n    const [nextUrl, setNextUrl] = useState(null)\n    const [tweetsDidSet, setTweetsDidSet] = useState(false)\n    useEffect(()=>{\n        const final = [...props.newTweets].concat(tweetsInit)\n        if (final.length !== tweets.length) {\n            setTweets(final)\n        }\n    }, [props.newTweets, tweets, tweetsInit])\n\n    useEffect(() => {\n        if (tweetsDidSet === false){\n            const handleTweetListLookup = (response, status) => {\n                if (status === 200){\n                    setNextUrl(response.next)\n                    setTweetsInit(response.results)\n                    setTweetsDidSet(true)\n                }\n            }\n            apiTweetFeed(handleTweetListLookup)\n        }\n    }, [tweetsInit, tweetsDidSet, setTweetsDidSet, props.username])\n\n\n    const handleDidRetweet = (newTweet) => {\n        const updateTweetsInit = [...tweetsInit]\n        updateTweetsInit.unshift(newTweet)\n        setTweetsInit(updateTweetsInit)\n        const updateFinalTweets = [...tweets]\n        updateFinalTweets.unshift(tweets)\n        setTweets(updateFinalTweets)\n    }\n    const handleLoadNext = (event) => {\n        event.preventDefault()\n        if (nextUrl !== null) {\n            const handleLoadNextResponse = (response, status) =>{\n                if (status === 200){\n                    setNextUrl(response.next)\n                    const newTweets = [...tweets].concat(response.results)\n                    setTweetsInit(newTweets)\n                    setTweets(newTweets)\n                }\n            }\n            apiTweetFeed(handleLoadNextResponse, nextUrl)\n        }\n    }\n\n    return <React.Fragment>{tweets.map((item, index)=>{\n        return <Tweet\n            tweet={item}\n            didRetweet={handleDidRetweet}\n            className='my-5 py-5 border bg-white text-dark'\n            key={`${index}-{item.id}`} />\n    })}\n        {nextUrl !== null && <button onClick={handleLoadNext} className='btn btn-outline-primary'>Load next</button>}\n    </React.Fragment>\n}","import React, {useEffect, useState} from \"react\"\nimport {apiTweetList} from \"./lookup\";\nimport {Tweet} from \"./detail\";\n\n//6h13\nexport function TweetsList(props) {\n    const [tweetsInit, setTweetsInit] = useState([])\n    const [tweets, setTweets] = useState([])\n    const [nextUrl, setNextUrl] = useState(null)\n    const [tweetsDidSet, setTweetsDidSet] = useState(false)\n    useEffect(()=>{\n        const final = [...props.newTweets].concat(tweetsInit)\n        if (final.length !== tweets.length) {\n            setTweets(final)\n        }\n    }, [props.newTweets, tweets, tweetsInit])\n\n    useEffect(() => {\n        if (tweetsDidSet === false){\n            const handleTweetListLookup = (response, status) => {\n                if (status === 200){\n                    setNextUrl(response.next)\n                    setTweetsInit(response.results)\n                    setTweetsDidSet(true)\n                } else {\n                    alert(\"There was an error\")\n                }\n            }\n            apiTweetList(props.username, handleTweetListLookup) // Null value is needed by default. will be replaced by username\n        }\n    }, [tweetsInit, tweetsDidSet, setTweetsDidSet, props.username])\n\n    const handleDidRetweet = (newTweet) => {\n        const updateTweetsInit = [...tweetsInit]\n        updateTweetsInit.unshift(newTweet)\n        setTweetsInit(updateTweetsInit)\n        const updateFinalTweets = [...tweets]\n        updateFinalTweets.unshift(tweets)\n        setTweets(updateFinalTweets)\n    }\n    const handleLoadNext = (event) => {\n        event.preventDefault()\n        if (nextUrl !== null) {\n            const handleLoadNextResponse = (response, status) =>{\n                if (status === 200){\n                    setNextUrl(response.next)\n                    const newTweets = [...tweets].concat(response.results)\n                    setTweetsInit(newTweets)\n                    setTweets(newTweets)\n                } else {\n                    alert(\"There was an error\")\n                }\n            }\n            apiTweetList(props.username, handleLoadNextResponse, nextUrl)\n        }\n    }\n\n    return <React.Fragment>{tweets.map((item, index)=>{\n        return <Tweet\n            tweet={item}\n            didRetweet={handleDidRetweet}\n            className='my-5 py-5 border bg-white text-dark'\n            key={`${index}-{item.id}`} />\n    })}\n        {nextUrl !== null && <button onClick={handleLoadNext} className='btn btn-outline-primary'>Load next</button>}\n    </React.Fragment>\n}","import React, {useEffect, useState}  from 'react'\n\nimport {TweetCreate} from './create'\nimport {Tweet} from './detail'\nimport {apiTweetDetail} from './lookup'\nimport {FeedList} from './feed'\nimport {TweetsList} from './list'\n\nexport function FeedComponent(props) {\n    const [newTweets, setNewTweets] = useState([])\n    const canTweet = props.canTweet === \"false\" ? false : true\n    const handleNewTweet = (newTweet) =>{\n        let tempNewTweets = [...newTweets]\n        tempNewTweets.unshift(newTweet)\n        setNewTweets(tempNewTweets)\n    }\n    return <div className={props.className}>\n        {canTweet === true && <TweetCreate didTweet={handleNewTweet} className='col-12 mb-3' />}\n        <FeedList newTweets={newTweets} {...props} />\n    </div>\n}\n\nexport function TweetsComponent(props) {\n    const [newTweets, setNewTweets] = useState([])\n    const canTweet = props.canTweet === \"false\" ? false : true\n    const handleNewTweet = (newTweet) =>{\n        let tempNewTweets = [...newTweets]\n        tempNewTweets.unshift(newTweet)\n        setNewTweets(tempNewTweets)\n    }\n    return <div className={props.className}>\n        {canTweet === true && <TweetCreate didTweet={handleNewTweet} className='col-12 mb-3' />}\n        <TweetsList newTweets={newTweets} {...props} />\n    </div>\n}\n\n\nexport function TweetDetailComponent(props){\n    const {tweetId} = props\n    const [didLookup, setDidLookup] = useState(false)\n    const [tweet, setTweet] = useState(null)\n\n    const handleBackendLookup = (response, status) => {\n        if (status === 200) {\n            setTweet(response)\n        } else {\n            alert(\"There was an error finding your tweet.\")\n        }\n    }\n    useEffect(()=>{\n        if (didLookup === false){\n\n            apiTweetDetail(tweetId, handleBackendLookup)\n            setDidLookup(true)\n        }\n    }, [tweetId, didLookup, setDidLookup]) // arguments that the use effect function will use\n\n    return tweet === null ? null : <Tweet tweet={tweet} className={props.className} />\n}","import React from \"react\"; // run HTTP request from the backend\nimport logo from './logo.svg';\nimport './App.css';\nimport {TweetsComponent} from \"./tweets\";\n\n\nfunction App() {\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <div>\n          <TweetsComponent/>\n        </div>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                        'worker. To learn more, visit https://bit.ly/CRA-PWA'\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch(error => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n        headers: { 'Service-Worker': 'script' }\n    })\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type');\n            if (\n                response.status === 404 ||\n                (contentType != null && contentType.indexOf('javascript') === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log(\n                'No internet connection found. App is running in offline mode.'\n            );\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready.then(registration => {\n            registration.unregister();\n        });\n    }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport {FeedComponent, TweetsComponent, TweetDetailComponent} from './tweets'\nimport * as serviceWorker from './serviceWorker';\n\nconst appEl = document.getElementById('root')\nif (appEl) {\n    ReactDOM.render(<App />, appEl);\n}\nconst e = React.createElement\nconst tweetsEl = document.getElementById(\"tweetme-2\")\nif (tweetsEl) {\n    ReactDOM.render(\n        e(TweetsComponent, tweetsEl.dataset), tweetsEl);\n}\n\nconst tweetFeedEl = document.getElementById(\"tweetme-2-feed\")\nif (tweetFeedEl) {\n    ReactDOM.render(\n        e(FeedComponent, tweetFeedEl.dataset), tweetFeedEl);\n}\n\nconst tweetDetailElements = document.querySelectorAll(\".tweetme-2-detail\")\n\ntweetDetailElements.forEach(container=> { // Rendering the details elements\n    ReactDOM.render(\n        e(TweetDetailComponent, container.dataset),\n        container); //inserting the data into the container element\n})\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nserviceWorker.unregister();\n"],"sourceRoot":""}